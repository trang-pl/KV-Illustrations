"""
Main FastAPI Application
·ª®ng d·ª•ng FastAPI ch√≠nh cho MCP Figma Sync Server
"""

import logging
from contextlib import asynccontextmanager
from datetime import datetime
from typing import Dict, Any
import uvicorn

from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse

from config.settings import settings
from .api.models.schemas import (
    SyncTriggerRequest, SyncTriggerResponse, SyncStatusResponse,
    ConfigResponse, ConfigUpdateRequest, SyncHistoryResponse,
    HealthResponse, ErrorResponse, SyncStatus
)
from .services.figma_sync import FigmaSyncService
from .workers.background_worker import BackgroundWorker
from .utils.helpers import generate_sync_id, validate_file_key, validate_node_id


# C·∫•u h√¨nh logging
logging.basicConfig(
    level=getattr(logging, settings.log_level.upper()),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


# D·ªãch v·ª• to√†n c·ª•c
sync_service = FigmaSyncService()
background_worker = BackgroundWorker()


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Qu·∫£n l√Ω v√≤ng ƒë·ªùi ·ª©ng d·ª•ng"""
    logger.info("üöÄ Starting MCP Figma Sync Server")

    # T√°c v·ª• kh·ªüi ƒë·ªông
    await background_worker.start()

    yield

    # T√°c v·ª• t·∫Øt m√°y
    await background_worker.stop()
    logger.info("üõë MCP Figma Sync Server stopped")


# T·∫°o ·ª©ng d·ª•ng FastAPI
app = FastAPI(
    title="MCP Figma Sync Server",
    description="Server ƒë·ªìng b·ªô SVG t·ª´ Figma v·ªõi MCP support",
    version="1.0.0",
    lifespan=lifespan
)

# Th√™m middleware CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.server.cors_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


@app.get("/health", response_model=HealthResponse)
async def health_check():
    """Health check endpoint"""
    return HealthResponse(
        status="healthy",
        version="1.0.0",
        uptime=str(datetime.now() - background_worker.start_time)
    )


@app.post("/api/v1/sync/trigger", response_model=SyncTriggerResponse)
async def trigger_sync(
    request: SyncTriggerRequest,
    background_tasks: BackgroundTasks
):
    """Trigger ƒë·ªìng b·ªô t·ª´ Figma"""
    try:
        # X√°c th·ª±c ƒë·∫ßu v√†o
        if not validate_file_key(request.file_key):
            raise HTTPException(status_code=400, detail="Invalid Figma file key")

        if not validate_node_id(request.node_id):
            raise HTTPException(status_code=400, detail="Invalid node ID")

        # T·∫°o ID ƒë·ªìng b·ªô
        sync_id = generate_sync_id()

        # ƒê∆∞a t√°c v·ª• ƒë·ªìng b·ªô v√†o h√†ng ƒë·ª£i
        background_tasks.add_task(
            background_worker.process_sync_job,
            sync_id=sync_id,
            file_key=request.file_key,
            node_id=request.node_id,
            output_dir=request.output_dir,
            force_sync=request.force_sync,
            commit_message=request.commit_message,
            naming_filters=request.naming_filters.dict() if request.naming_filters else None
        )

        # ƒê·∫øm b·ªô l·ªçc ƒë√£ √°p d·ª•ng
        filters_applied = {"include_count": 0, "exclude_count": 0}
        if request.naming_filters:
            filters_applied["include_count"] = len(request.naming_filters.include_patterns)
            filters_applied["exclude_count"] = len(request.naming_filters.exclude_patterns)

        logger.info(f"üìù Sync job queued: {sync_id} for file {request.file_key}")

        return SyncTriggerResponse(
            sync_id=sync_id,
            status=SyncStatus.QUEUED,
            message="Sync job queued successfully",
            filters_applied=filters_applied
        )

    except Exception as e:
        logger.error(f"‚ùå Error triggering sync: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/api/v1/sync/{sync_id}/status", response_model=SyncStatusResponse)
async def get_sync_status(sync_id: str):
    """L·∫•y tr·∫°ng th√°i ƒë·ªìng b·ªô"""
    try:
        status_data = background_worker.get_sync_status(sync_id)
        if not status_data:
            raise HTTPException(status_code=404, detail="Sync job not found")

        return SyncStatusResponse(**status_data)

    except Exception as e:
        logger.error(f"‚ùå Error getting sync status: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/api/v1/config", response_model=ConfigResponse)
async def get_config():
    """L·∫•y c·∫•u h√¨nh hi·ªán t·∫°i"""
    try:
        return ConfigResponse(
            figma=settings.figma.dict(),
            git=settings.git.dict(),
            sync=settings.sync.dict(),
            server=settings.server.dict()
        )
    except Exception as e:
        logger.error(f"‚ùå Error getting config: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.put("/api/v1/config")
async def update_config(request: ConfigUpdateRequest):
    """C·∫≠p nh·∫≠t c·∫•u h√¨nh"""
    try:
        # ƒêi·ªÅu n√†y s·∫Ω c·∫≠p nh·∫≠t c·∫•u h√¨nh
        # Hi·ªán t·∫°i ch·ªâ tr·∫£ v·ªÅ th√†nh c√¥ng
        logger.info("üìù Config update requested")
        return {"message": "Configuration update not implemented yet"}

    except Exception as e:
        logger.error(f"‚ùå Error updating config: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/api/v1/sync/history", response_model=SyncHistoryResponse)
async def get_sync_history(page: int = 1, page_size: int = 10):
    """L·∫•y l·ªãch s·ª≠ ƒë·ªìng b·ªô"""
    try:
        # ƒêi·ªÅu n√†y s·∫Ω tr·∫£ v·ªÅ l·ªãch s·ª≠ ƒë·ªìng b·ªô t·ª´ database/storage
        # Hi·ªán t·∫°i tr·∫£ v·ªÅ ph·∫£n h·ªìi tr·ªëng
        return SyncHistoryResponse(
            items=[],
            total=0,
            page=page,
            page_size=page_size
        )

    except Exception as e:
        logger.error(f"‚ùå Error getting sync history: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.exception_handler(Exception)
async def global_exception_handler(request, exc):
    """Global exception handler"""
    logger.error(f"üí• Unhandled exception: {exc}")
    return JSONResponse(
        status_code=500,
        content=ErrorResponse(
            error="Internal server error",
            code="INTERNAL_ERROR",
            details={"message": str(exc)}
        ).dict()
    )


if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host=settings.server.host,
        port=settings.server.port,
        reload=True,
        log_level=settings.log_level.lower()
    )